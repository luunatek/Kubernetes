Taints & tolerations:
Tints - allow a node to repel a set of pods. Taints and tolarations work together to ensure that pods are not scheduled onto
inappropriate nodes. One or more taints are applied to a node; this marks that the node should not accept any pods that do not 
tolerate the taints. Tolerations are applied to pods, and allow (but do not require) the pods to schedule onto nodes with 
matching taints.
   - taints set on nodes;
   - toleration set on pods;
   
Taint node:
  $ kubectl taint nodes node-name key=value:taint-effect
  (taint-effect options: NoSchedule | PreferNoSchedule | NoExecute)
  $ kubectl taint nodes node1 app=web:NoSchedule
  
Example:
  $ kubectl taint nodes node1 key1=value1:NoSchedule
  $ kubectl taint nodes node1 key1=value1:NoExecute
  $ kubectl taint nodes node1 key2=value2:NoSchedule
  
pod-example.yaml
apiVersion:
kind: pod
metadata: 
  name: myapp-pod
spec:
  container:
  - name: nginx-container
  image: nginx
tolarations:
- key: "app"
  operator: "Equal"
  value: "web"
  effect: "NoSchedule"
  
  $ kubectl taint node1 app=web:NoSchedule

When kubernetes cluster is first set up, it will automatically taint it's set on master node to prevent any node being 
scheduled on this node.
  $ kubectl describe node master | grep Taint
    Taints:    node-role.kubernetes.io/master:NoSchedule
